---
layout: clean
title: Proton
---

<% content_for :scripts do

javascript_include_tag 'proton', 'pixi-only'

end %>
        <div id="container">

		</div>
		<script>
				var canvas;
			var context;
			var proton;
			var emitter;

			var pixiStage;
			var pixiRender;

			Main();
			function Main() {

				createProton();
				createRender();
				tick();
			}


			function createProton() {

				proton = new Proton();
				emitter = new Proton.BehaviourEmitter();
				emitter.rate = new Proton.Rate(new Proton.Span(15, 30), new Proton.Span(.2, .5));
				emitter.addInitialize(new Proton.Mass(1));


				emitter.addInitialize(new Proton.Velocity(new Proton.Span(3, 9), new Proton.Span(0, 30, true), 'polar'));

				emitter.addBehaviour(new Proton.Gravity(8));
				emitter.addInitialize(new Proton.Life(2,3));
				emitter.addBehaviour(new Proton.Scale(new Proton.Span(1, 3), 0.3));
				emitter.addBehaviour(new Proton.Alpha(1, 0.5));
				emitter.addBehaviour(new Proton.Rotate(0, Proton.getSpan(-8, 9), 'add'));
				emitter.p.x = 1003 / 2;
				emitter.p.y = 100;
				emitter.emit();
				proton.addEmitter(emitter);

				emitter.addSelfBehaviour(new Proton.Gravity(5));
				emitter.addSelfBehaviour(new Proton.RandomDrift(30, 30, .1));
				emitter.addSelfBehaviour(new Proton.CrossZone(new Proton.RectZone(50, 0, 953, 610), 'bound'));
			}

			function createRender() {
				//var renderer = new Proton.Renderer('other', proton);
				pixiRender = new PIXI.WebGLRenderer(1003, 610, {"clearBeforeRender": false, "preserveDrawingBuffer": true, "transparent": false});
				document.getElementById('container').appendChild(pixiRender.view);
				pixiStage = new PIXI.Container;
				var bloom = new PIXI.filters.BloomFilter();
				var blur = new PIXI.filters.BlurFilter();
				bloom.blur = 10;
				//blur.blur = 10;
				bloom.passes = 2;
				//pixiStage.filters = [ blur ];
				var renderer = new Proton.Renderer('other', proton);

				renderer.onProtonUpdate = function() {

				};
				renderer.onParticleCreated = function(particle) {
    				var graphics = new PIXI.Graphics();
    				particle.graphics = graphics;
    				pixiStage.addChild(particle.graphics);
    				graphics.moveTo(particle.p.x, particle.p.y);
/*
					var particleSprite = new PIXI.Sprite(particle.target);
					particle.sprite = particleSprite;
					pixiStage.addChild(particle.sprite);
*/
				};

				renderer.onParticleUpdate = function(particle) {
// 					transformSprite(particle.sprite, particle);
                    //particle.graphics.beginFill(0x90FF30);
                    particle.graphics.clear();
                    particle.graphics.lineStyle(1.5, 0x90FF30, 1);
					//context.beginPath();
					//context.strokeStyle = particle.color;
					//context.lineWidth = 1;
					//context.moveTo(particle.old.p.x, particle.old.p.y);
					particle.graphics.lineTo(particle.p.x, particle.p.y);
					//particle.graphics.endFill();
					//context.lineTo(particle.p.x, particle.p.y);
					//context.closePath();
					//context.stroke();
				};

				renderer.onParticleDead = function(particle) {
					pixiStage.removeChild(particle.graphics);
				};
				renderer.start();
			}

			function transformSprite(particleSprite, particle) {
				particleSprite.position.x = particle.p.x;
				particleSprite.position.y = particle.p.y;
				particleSprite.scale.x = particle.scale;
				particleSprite.scale.y = particle.scale;
				particleSprite.anchor.x = 0.5;
				particleSprite.anchor.y = 0.5;
				particleSprite.alpha = particle.alpha;
				particleSprite.rotation = particle.rotation*Math.PI/180;
			}

			function tick() {
				requestAnimationFrame(tick);


				proton.update();
				pixiRender.render(pixiStage);

			}
		</script>
